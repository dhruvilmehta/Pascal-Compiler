package wci.backend.interpreter;

import static wci.intermediate.icodeimpl.ICodeKeyImpl.ID;
import static wci.intermediate.icodeimpl.ICodeNodeTypeImpl.CALL;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.PrintStream;
import java.io.BufferedReader;

import wci.backend.Backend;
import wci.backend.interpreter.executors.CallDeclaredExecutor;
import wci.frontend.Scanner;
import wci.frontend.Source;
import wci.frontend.pascal.PascalScanner;
import wci.intermediate.ICode;
import wci.intermediate.ICodeFactory;
import wci.intermediate.ICodeNode;
import wci.intermediate.SymTabEntry;
import wci.intermediate.SymTabStack;
import wci.message.Message;
import static wci.message.MessageType.INTERPRETER_SUMMARY;

public class Executor extends Backend {
    protected static int executionCount;
    protected static RuntimeStack runtimeStack;
    protected static RuntimeErrorHandler errorHandler;
    protected static Scanner standardIn; // standard input
    protected static PrintWriter standardOut; // standard output
    static {
        executionCount = 0;
        runtimeStack = MemoryFactory.createRuntimeStack();
        errorHandler = new RuntimeErrorHandler();
        try {
            standardIn = new PascalScanner(new Source(new BufferedReader(new InputStreamReader(System.in))));
            standardOut = new PrintWriter(new PrintStream(System.out));
        } catch (IOException ignored) {
        }
    }

    /**
     * Execute the source program by processing the intermediate
     * code
     * and the symbol table stack generated by the parser.
     * 
     * @param iCode       the intermediate code.
     * @param symTabStack the symbol table stack.
     * @throws Exception if an error occurred.
     */
    public void process(ICode iCode, SymTabStack symTabStack)
            throws Exception {
        this.symTabStack = symTabStack;
        long startTime = System.currentTimeMillis();
        SymTabEntry programId = symTabStack.getProgramId();
        // Construct an artificial CALL node to the main program.
        ICodeNode callNode = ICodeFactory.createICodeNode(CALL);
        callNode.setAttribute(ID, programId);
        // Execute the main program.
        CallDeclaredExecutor callExecutor = new CallDeclaredExecutor(this);
        callExecutor.execute(callNode);
        float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
        int runtimeErrors = errorHandler.getErrorCount();
        // Send the interpreter summary message.
        sendMessage(new Message(INTERPRETER_SUMMARY,
                new Number[] { executionCount,
                        runtimeErrors,
                        elapsedTime }));
    }
}
